{"version":3,"file":"assets/js/application.bundle.65ec094588935e41ec89.js","sources":["webpack:///./app/app.js","webpack:///./app/modules/map/index.js","webpack:///./app/modules/voronoi/index.js","webpack:///./app/assets/stylesheets/app.styl"],"sourcesContent":["'use strict';\n\n// Stylesheet entrypoint\nrequire('_stylesheets/app.styl');\n\nconst HexMap = require('_modules/map');\n\nnew HexMap('body');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/app.js\n ** module id = 0\n ** module chunks = 1\n **/","// Depends\nconst $ = require('jquery');\nconst d3 = require('d3');\nd3.hexbin = require('d3-hexbin').hexbin;\nconst pointInPolygon = require('point-in-polygon');\n\nconst voronoiMap = require('_modules/voronoi');\n\nmodule.exports = function(el) {\n  let margin = {\n    top: 50,\n    right: 20,\n    bottom: 20,\n    left: 50\n  };\n  let width = 850;\n  let height = 350;\n  let MapColumns = 30;\n  let MapRows = 20;\n  let hexRadius = d3.min([width/((MapColumns + 0.5) * Math.sqrt(3)),height/((MapRows + 1/3) * 1.5)]);\n\n  let points = [];\n  for (let i = 0; i < MapRows; i++) {\n    for (let j = 0; j < MapColumns; j++) {\n      points.push([hexRadius * j * 1.75, hexRadius * i * 1.5]);\n    }\n  }\n  let hexbin = d3.hexbin().radius(hexRadius);\n  let hexpoints = hexbin(points);\n  hexpoints[0].visited = true;\n\n  let svg = d3.select(el).append('svg')\n    .attr('width', width + margin.left + margin.right)\n    .attr('height', height + margin.top + margin.bottom)\n    .append('g')\n    .attr('transform', 'translate(' + margin.left + ',' + margin.top + ')');\n\n  let hexmap = svg.append('g').classed('hexmap', true);\n\n  hexmap.selectAll('.hexagon')\n    .data(hexpoints)\n    .enter()\n    .append('path')\n    .attr('class', 'hexagon')\n    .attr('d', (d) => 'M' + d.x + ',' + d.y + hexbin.hexagon())\n    .attr('stroke', 'white')\n    .attr('stroke-width', '1px')\n    .style('fill', '#676666');\n\n  svg.selectAll('.hexagon')\n    .on('mousedown', update);\n\n  svg.append('g')\n    .append('circle')\n    .attr('r', 5);\n\n  let token = d3.select('circle');\n\n  function update(e) {\n    if (!e.clickable) return;\n\n    e.visited = true;\n\n    svg.selectAll('.hexagon')\n      .each((d) => {\n        let result;\n        if((e.i%2 !== 0 && e.j%2 !== 0) || (e.i%2 == 0 && e.j%2 !== 0)){\n          result = (d.i <= e.i+1 && d.i >= e.i) && (d.j <= e.j+1 && d.j >= e.j-1) || (d.j == e.j && d.i == e.i-1) ? true : false ;\n        } else {\n          result = (d.i <= e.i && d.i >= e.i-1) && (d.j <= e.j+1 && d.j >= e.j-1) || (d.j == e.j && d.i == e.i+1) ? true : false ;  \n        }\n        d.clickable = result;\n        if (!d.visible) d.visible = result;\n      })\n      .style('fill', (d) => (d.visited || d.visible) ? d.region : '#676666')\n      .style('stroke', (d) => d.clickable ? '#78FFAB' : 'white' )\n      .style('fill-opacity', (d) => d.clickable ? 1 : 0.5)\n      .classed('_active', (d) => d.clickable ? true : false);\n\n    token.transition()\n      .attr('cx', e.x)\n      .attr('cy', e.y)\n  }\n\n  let poligons = voronoiMap();\n\n  let regions = ['desert', 'forest', 'hills', 'marsh', 'mountains', 'plains'];\n  \n  let colors = ['red', 'green', 'blue', 'orange', 'yellow', 'purple', 'violet', 'steelblue', 'wheat', '#515050'];\n\n  function rollDice(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  // function generateRegion(i) {\n  //   // i%6\n  //   rollDice(1, 6)\n  // }\n\n  svg.selectAll('.hexagon')\n    .each((d) => {\n      poligons.forEach((p, i) => {\n        if (pointInPolygon([d.x, d.y], p)) d.region = colors[i];\n      });\n    })\n\n  update({\n    i: 0,\n    j: 0,\n    x: hexpoints[0].x,\n    y: hexpoints[0].y,\n    clickable: true\n  });\n\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/modules/map/index.js\n ** module id = 6\n ** module chunks = 1\n **/","const d3 = require('d3');\n\nmodule.exports = function() {\n  let hexmap = d3.select('.hexmap').node().getBBox();\n  let width = hexmap.width;\n  let height = hexmap.height;\n  let vertices = d3.range(10).map((d) => [Math.random() * width, Math.random() * height]);\n  let voronoi = d3.geom.voronoi().clipExtent([[0, 0], [width, height]]);\n  return voronoi(vertices);\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/modules/voronoi/index.js\n ** module id = 7\n ** module chunks = 1\n **/","// removed by extract-text-webpack-plugin\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./app/assets/stylesheets/app.styl\n ** module id = 10\n ** module chunks = 1\n **/"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AClHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACTA;;;","sourceRoot":""}