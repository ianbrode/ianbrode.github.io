{"version":3,"sources":["container/list/index.tsx","component/star.tsx","component/planet.tsx","utils.ts","component/orbit.tsx","container/map/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Panel","Collapse","callback","key","console","log","CreateOrbit","items","onChange","shape","icon","onClick","push","type","position","size","length","planet","color","angle","List","_items","map","e","i","header","value","min","max","onChangeComplete","hex","style","backgroundColor","left","top","transform","width","height","borderRadius","transition","orbitSize","x","y","radius","angleInRadians","Math","PI","cos","sin","getCoordForPlanetFomOrbit","border","star","orbits","padding","initial","App","useState","spaceOjects","setSpaceObject","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a4fca71.chunk.js","sourcesContent":["import React from \"react\";\nimport { SketchPicker } from \"react-color\";\n\nimport Collapse from \"antd/es/collapse\";\nimport Card from \"antd/es/card\";\nimport Button from \"antd/es/button\";\nimport Slider, { SliderValue } from \"antd/es/slider\";\n\nconst { Panel } = Collapse;\n\nfunction callback(key: string | string[]) {\n  console.log(key);\n}\n\nconst text = `\n    A dog is a type of domesticated animal.\n    Known for its loyalty and faithfulness,\n    it can be found as a welcome guest in many households across the world.\n  `;\n\nconst CreateOrbit = ({ items, onChange }: any) => {\n  return (\n    <Button\n      shape=\"circle\"\n      icon=\"plus-circle\"\n      onClick={() => {\n        items.push({\n          type: \"orbit\",\n          position: [250, 250],\n          size: (items.length && items[items.length - 1].size + 20) || 30,\n          planet: {\n            size: 10,\n            color: \"green\",\n            angle: 360\n          }\n        });\n        onChange(items);\n      }}\n    />\n  );\n};\n\nconst List = ({ items = [], onChange }: any) => {\n  const _items = [...items];\n\n  return (\n    <div>\n      <Card>\n        Controls <CreateOrbit items={_items} onChange={onChange} />\n      </Card>\n      <Collapse onChange={callback}>\n        {_items.map((e: any, i: number) => {\n          switch (e.type) {\n            case \"star\":\n              return (\n                <Panel header={e.type} key={i}>\n                  <p>Star Size: {e.size}</p>\n                  <Slider\n                    value={e.size}\n                    min={1}\n                    max={500}\n                    onChange={(value: SliderValue) => {\n                      _items[i].size = value;\n                      onChange(_items);\n                    }}\n                  />\n                  <p>Star Color: {e.color}</p>\n                  <SketchPicker\n                    color={e.color}\n                    onChangeComplete={(color: any) => {\n                      _items[i].color = color.hex;\n                      onChange(_items);\n                    }}\n                  />\n                </Panel>\n              );\n            case \"orbit\":\n              return (\n                <Panel header={`${e.type} ${i}`} key={i}>\n                  <p>Orbit Size: {e.size}</p>\n                  <Slider\n                    value={e.size}\n                    min={1}\n                    max={500}\n                    onChange={(value: SliderValue) => {\n                      _items[i].size = value;\n                      onChange(_items);\n                    }}\n                  />\n                  {e.planet && (\n                    <>\n                      <p>Planet Size: {e.planet.size}</p>\n                      <Slider\n                        value={e.planet.size}\n                        min={1}\n                        max={500}\n                        onChange={(value: SliderValue) => {\n                          _items[i].planet.size = value;\n                          onChange(_items);\n                        }}\n                      />\n                      <p>Planet Color: {e.planet.color}</p>\n                      <SketchPicker\n                        color={e.planet.color}\n                        onChangeComplete={(color: any) => {\n                          _items[i].planet.color = color.hex;\n                          onChange(_items);\n                        }}\n                      />\n                      <p>{e.planet.angle}</p>\n                      <Slider\n                        value={e.planet.angle}\n                        min={0}\n                        max={360}\n                        onChange={(value: SliderValue) => {\n                          _items[i].planet.angle = value;\n                          onChange(_items);\n                        }}\n                      />\n                    </>\n                  )}\n                </Panel>\n              );\n            default:\n              return (\n                <Panel header=\"This is panel header 1\" key=\"1\">\n                  <p>{text}</p>\n                </Panel>\n              );\n          }\n        })}\n      </Collapse>\n    </div>\n  );\n};\n\nexport default List;\n","import React from 'react';\n\nexport default ({color, position, size}: {color: string, position: [number, number], size: number}) => {\n    const style: any = {\n        backgroundColor: color,\n        left: position[0],\n        top: position[1],\n        transform: 'translate(-50%, -50%)',\n        position: 'absolute',\n        width: size,\n        height: size,\n        borderRadius: '50%',\n        transition: '.3s ease'\n    }\n\n    return (\n        <div style={style} />\n    )\n};","import React from \"react\";\n\nimport { getCoordForPlanetFomOrbit } from \"../utils\";\n\nexport default ({\n  color,\n  position,\n  size,\n  angle,\n  orbitSize\n}: {\n  color: string;\n  position: [number, number];\n  size: number;\n  angle: number;\n  orbitSize: number;\n}) => {\n  const [x, y] = getCoordForPlanetFomOrbit(\n    position[0],\n    position[1],\n    orbitSize / 2,\n    angle - 90\n  );\n\n  const style: any = {\n    backgroundColor: color,\n    left: x,\n    top: y,\n    transform: \"translate(-50%, -50%)\",\n    position: \"absolute\",\n    width: size,\n    height: size,\n    borderRadius: \"50%\",\n    transition: \".3s ease\"\n  };\n\n  return <div style={style} />;\n};\n","export const getCoordForPlanetFomOrbit = (\n    x: number,\n    y: number,\n    radius: number,\n    angle: number\n  ): [number, number] => {\n    const angleInRadians = angle * (Math.PI/180);\n  \n    const _x = radius * Math.cos(angleInRadians) + x;\n    const _y = radius * Math.sin(angleInRadians) + y;\n  \n    return [_x, _y]\n  };","import React from \"react\";\nimport Planet from \"./planet\";\n\nexport default ({\n  position,\n  size,\n  planet\n}: {\n  color: string;\n  position: [number, number];\n  size: number;\n  planet: any;\n}) => {\n  const style: any = {\n    left: position[0],\n    top: position[1],\n    transform: \"translate(-50%, -50%)\",\n    position: \"absolute\",\n    width: size,\n    height: size,\n    borderRadius: \"50%\",\n    border: \"1px solid rgba(255, 255, 255, .2)\",\n    transition: \".3s ease\"\n  };\n\n  return (\n    <>\n      <div style={style}></div>\n      {planet && <Planet {...planet} position={position} orbitSize={size} />}\n    </>\n  );\n};\n","import React from \"react\";\nimport Star from \"../../component/star\";\nimport Orbit from \"../../component/orbit\";\n\nexport default ({ items = [] }: any) => {\n  const style = {\n    backgroundColor: \"black\",\n    padding: \"6px\",\n    width: 500,\n    height: 500,\n    position: \"relative\"\n  } as React.CSSProperties;\n\n  const [star, ...orbits] = items;\n\n  return (\n    <div style={style}>\n      {star && <Star {...star} />}\n\n      {orbits &&\n        orbits.length &&\n        orbits.map((e: any, i: number) => <Orbit {...e} key={i} />)}\n    </div>\n  );\n};\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport List from \"./container/list\";\nimport Map from \"./container/map\";\n\nconst initial = [\n  {\n    type: \"star\",\n    position: [250, 250],\n    size: 10,\n    color: \"red\"\n  },\n  {\n    type: \"orbit\",\n    position: [250, 250],\n    size: 30,\n    planet: {\n      size: 10,\n      color: 'green',\n      angle: 360,\n    }\n  },\n];\n\nconst App: React.FC = () => {\n  const [spaceOjects, setSpaceObject] = useState(initial);\n\n  return (\n    <div className=\"App\">\n      <div className=\"leftPane\">\n        <Map items={spaceOjects} />\n      </div>\n      <div className=\"rightPane\">\n        <List items={spaceOjects} onChange={setSpaceObject}/>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}